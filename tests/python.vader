# Vader tests for line continuation joining with conjoin.
# Python uses backslash line continuation.
# Test basic functionality; more coverage in shell.vader.

Given python (A function with a line break):
  def fun(x, y):
    if x\
        and y:
      print('Something')

Do (Join the condition with J):
  2ggJ

Expect python:
  def fun(x, y):
    if x and y:
      print('Something')


Given python (A function with a line break):
  def fun(x, y):
    if x\
        and y:
      print('Something')

Do (Join the condition with gJ):
  2gggJ

Expect python (with six space separation):
  def fun(x, y):
    if x      and y:
      print('Something')


Given python (A docstring with backslashes):
  """conjoin does not\
  currently do anything special \
  when a co\ntinuation character
  \appears in a docstring,\
    a comment, or other context \
      where it's not continuing
    \a line."""

Do (Join the whole string with visual J):
  vGJ

Expect python (with six space separation):
  """conjoin does not currently do anything special when a co\ntinuation character \appears in a docstring, a comment, or other context where it's not continuing \a line."""


Given python (A docstring with backslashes):
  """conjoin does not\
  currently do anything special \
  when a co\ntinuation character
  \appears in a docstring,\
    a comment, or other context \
      where it's not continuing
    \a line."""

Do (Join the whole string with visual gJ):
  vGgJ

Expect python (with awkward space separation):
  """conjoin does notcurrently do anything special when a co\ntinuation character\appears in a docstring,  a comment, or other context     where it's not continuing  \a line."""


Given python (A function with a multi-line break):
  def fun(x, y):
    if x\
        and y \
        and True or  \
        False:
      print('Something')
    elif \
      x\
        or y:
      print('Something else')

Execute (Join the condition with :Join):
  redir @a
  2,5Join p#
  redir END
  4Join 3
# Extra space before False because :join preserves trailing space  
  AssertEqual "\n".'  2   if x and y and True or  False:', @a

Expect python:
# Extra space before False because :join preserves trailing space  
  def fun(x, y):
    if x and y and True or  False:
      print('Something')
    elif x or y:
      print('Something else')


Given python (A function with a multi-line break):
  def fun(x, y):
    if x\
        and y \
        and True or  \
        False:
      print('Something')
    elif \
      x\
        or y:
      print('Something else')

Execute (Join the condition with :Join!):
  2,5Join!
  4
  Join! 3

Expect python:
  def fun(x, y):
    if x      and y       and True or        False:
      print('Something')
    elif     x      or y:
      print('Something else')


Given python (A function with single quote literal concatenation):
  def fun(x, y):
    if x\
        and y:
      print('Something'
            ' and '
            'something else')

Do (Join the string with J):
  2gg5J

Expect python:
  def fun(x, y):
    if x and y: print('Something and something else')


Given python (A function with double quote literal concatenation):
  def fun(x, y):
    if x\
        and y:
      print(
        "Something"
        " and "
        "something else")

Do (Join the string with gJ):
  2gg6gJ

Expect python:
  def fun(x, y):
    if x      and y:    print(      "Something and something else")


Given python (A function with mixed quote literal concatenation):
  def fun(x, y):
    if x\
        and y:
      print(
        "Something"
        ' and '
        "something " 'else')

Do (Join the string with J):
  2gg6J

Expect python:
  def fun(x, y):
    if x and y: print( "Something" ' and ' "something " 'else')


Given python (A literal string concatenation and following lines):
  x = ('Hello'
       ', World!')
  print('Greeting: '
        r'%s' % x)
  y = 'Something'\
    ' and ' \
    "something else"

Do (Join the whole file with visual J):
  VGJ

Expect python:
  x = ('Hello, World!') print('Greeting: ' r'%s' % x) y = 'Something and ' "something else"


Given python (A literal string concatenation list argument):
  l = [
    42,
    'Hello, W'
    'orld',
    [x * 2 for
      x in range(1, 10) \
    ], 'another'
    'string'
  ]

Do (Join the list items with visual J):
  jwv5jWJ

Expect python:
  l = [
    42, 'Hello, World', [x * 2 for x in range(1, 10) ], 'another'
    'string'
  ]


Given python (A multi-line string):
  x =\
    "Lorem"
    "ipsum"
    "dolor"
    "sit"
    "amet"
  print(x)
  print(x.upper())

Execute (Join the string with :Join count):
  Join 6

Expect python:
  x = "Loremipsumdolorsitamet"
  print(x)
  print(x.upper())


Given python (A multi-line string):
  x =\
    "Lorem"
    "ipsum"
    "dolor"
    "sit"
    "amet"
  print(
        x.upper())

Do (Join the file with visual gJ):
  VGgJ

Expect python:
  x =  "Loremipsumdolorsitamet"print(      x.upper())
