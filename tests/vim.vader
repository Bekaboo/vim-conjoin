# Vader tests for line continuation joining with conjoin.
# Vim uses backslashes (with optional leading space) for line continuation
# because trailing backslashes would be ambiguous.
# A comment starting with "\ can be used as in a continuation sequence,
# but conjoin doesn't handle that case specially.
# Test basic functionality; more coverage in shell.vader.

Given vim (Some vimscript with line continuations):
  echo 'foo'
    \ 'bar'
    "\ comment
    \"baz\nqux"

Do (Join all lines with J):
  4J

Expect vim:
  echo 'foo' 'bar' "\ comment "baz\nqux"


Given vim (A vim function with continuation):
  function foo(x, y)
    if a:x
  \> a:y
      echo
        \ a:x
      \   a:y
    endif
  endfunction

Do (Join body with visual gJ):
  jvGkgJ

Expect vim:
  function foo(x, y)
    if a:x> a:y    echo a:x   a:y  endif
  endfunction


Given vim (An extended list):
  let x
  \= [
    \'apples',
    \'bananas'
    \, 'cherries',
    "\ some people don't like durian
    "\but I think they're great
    \ 'durians'
  \ ]

Execute (Join the whole expression with :Join! count):
  Join! 9

Expect vim:
  let x= ['apples','bananas', 'cherries',  "\ some people don't like durian  "\but I think they're great 'durians' ]


Given vim (Two line command):
  nnoremap <Leader>J
    \:join<CR>

Do (Join with J):
  J

Expect vim:
  nnoremap <Leader>J :join<CR>


Given vim (Two line command):
  nnoremap <Leader>J
    \:join<CR>

Do (Join with gJ):
  gJ

Expect vim:
  nnoremap <Leader>J:join<CR>


Given vim (Two line command):
  nnoremap <Leader>J
    \:join<CR>

Do (Join with visual J):
  VJ

Expect vim:
" One-line visual J is same as non-visual J
  nnoremap <Leader>J :join<CR>


Given vim (Two line command):
  nnoremap <Leader>J
    \:join<CR>

Do (Join with visual gJ):
  vgJ

Expect vim:
" One-line visual gJ is same as non-visual gJ
  nnoremap <Leader>J:join<CR>


Given vim (Two line command):
  nnoremap <Leader>J
    \:join<CR>

Execute (Join with :Join):
  Join

Expect vim:
  nnoremap <Leader>J :join<CR>


Given vim (Two line command):
  nnoremap <Leader>J
    \:join<CR>

Execute (Join with :Join!):
  Join!

Expect vim:
  nnoremap <Leader>J:join<CR>


Given vim (Single-quote string concatenation with one dot):
  printf('Lorem '
    \ . 'ipsum' .
    \' sic '
    \.'dolor' . ' amet')

Do (Join with J):
  4J

Expect vim:
  printf('Lorem ipsum sic dolor' . ' amet')


Given vim (Double-quote string concatenation with one dot):
  printf("Lorem "
    \ . "ipsum" .
    \" sic "
    \."dolor" . " amet")

Do (Join with gJ):
  4gJ

Expect vim:
  printf("Lorem ipsum sic dolor" . " amet")


Given vim (Single-quote string concatenation with two dots):
  printf('Lorem '
    \ .. 'ipsum' ..
    \' sic '
    \..'dolor' .. ' amet')

Do (Join with gJ):
  4J

Expect vim:
  printf('Lorem ipsum sic dolor' .. ' amet')


Given vim (Double-quote string concatenation with two dots):
  printf("Lorem "
    \ .. "ipsum" ..
    \" sic "
    \.."dolor" .. " amet")

Do (Join with J):
  4J

Expect vim:
  printf("Lorem ipsum sic dolor" .. " amet")
